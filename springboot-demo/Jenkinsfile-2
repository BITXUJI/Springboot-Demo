pipeline {
  agent { label 'docker-gradle8-jdk21-corretto' }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  environment {
    SONAR_PROJECT_KEY='Springboot-Demo'
  }
  stages {
    stage('Scan') {
      steps {
        withSonarQubeEnv(installationName: 'sonarqube-server1') { 
          script {
            sh 'chmod +x gradlew'
            sh "./gradlew clean build sonar -Dsonar.projectKey=${env.SONAR_PROJECT_KEY}"
            def sonarUrl = "${env.SONAR_HOST_URL}/dashboard?id=${env.SONAR_PROJECT_KEY}"
            echo "SonarQube Dashboard: ${sonarUrl}"
          }
        }
      }
    }
    // you need to set a url endwith sonarqube-webhook in Administration -> Configuration -> Webhooks 
    // to get the build status back to Jenkins
    // secret is not required
    //Example: http://your-jenkins-server:port/sonarqube-webhook/
    stage("Quality Gate") {
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    // 用于等待SonarQube质量门的状态 another way of waitForQualityGate
    // stage('Quality Gate') {
    //   steps {
    //       timeout(time: 10, unit: 'MINUTES') {
    //           script {
    //               // 定义轮询次数及间隔（例如每10秒轮询一次，总共最多轮询60次）
    //               def maxRetries = 60
    //               def sleepTime = 10  // 单位：秒
    //               def qualityGateStatus = null

    //               for (int i = 0; i < maxRetries; i++) {
    //                   echo "Polling SonarQube for Quality Gate status (attempt ${i+1}/${maxRetries})..."
    //                   // 使用 curl 调用 SonarQube API 接口获取项目质量门状态
    //                   def response = sh(
    //                       script: "curl -s -u ${env.SONAR_TOKEN}: ${env.SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${env.SONAR_PROJECT_KEY}",
    //                       returnStdout: true
    //                   ).trim()

    //                   // Remember: 解析 JSON 数据（需确保 Jenkins 中已安装 Pipeline Utility Steps 插件以支持 readJSON）
    //                   def json = readJSON text: response
    //                   qualityGateStatus = json.projectStatus.status
    //                   echo "Quality Gate Status: ${qualityGateStatus}"

    //                   // 根据返回状态做出判断
    //                   if (qualityGateStatus == "OK") {
    //                       echo "Quality Gate Passed!"
    //                       break
    //                   } else if (qualityGateStatus == "ERROR") {
    //                       error "Quality Gate Failed!"
    //                   }
    //                   // 若状态未返回则等待一段时间后继续轮询
    //                   sleep time: sleepTime, unit: 'SECONDS'
    //               }

    //               // 若超过轮询次数仍未获取到状态，则中断流水线
    //               if (qualityGateStatus == null) {
    //                   error "Timeout: 未获取到 Quality Gate 状态"
    //               }
    //           }
    //       }
    //   }
    // }
  }
}