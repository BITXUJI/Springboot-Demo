plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'pmd'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.1.3'
    id 'org.sonarqube' version '6.0.1.5171'
	id 'war'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
	useJUnitPlatform()	
}
checkstyle {
	toolVersion  = '10.21.2'
	configFile = file("$rootDir/checkstyle-checks.xml")
	ignoreFailures = true
	checkstyleMain {
		source 'src/main/java'
	}
	checkstyleTest {
		source 'src/test/java'
	}
	checkstyleTest.enabled = false
	configProperties  =[
		'checkstyle.java.version': '21'	
	]
	
}

tasks.withType(Checkstyle) {
	reports {
		xml.required = true
		html.required = true
	}
	
}

jacoco {
	toolVersion = "0.8.12"
}
jacocoTestReport {
	reports {	
		xml.required = true		
		csv.required = false
		html.required = true	
	}
	test.finalizedBy jacocoTestReport

}


spotbugs {
	toolVersion = "4.9.0"
	ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	reports {
		xml.required = true
		html.required = true
	}
}

pmd {	
	toolVersion = "6.55.0"
	sourceSets = [sourceSets.main]
	ignoreFailures = true
	consoleOutput = true
	ruleSets = [
		"java-basic",
		"java-braces",
		"java-clone",
		"java-codesize",
		"java-continuations",
		"java-design",
		"java-empty",
		"java-finalizers",
		"java-imports",
		"java-junit",
		"java-metrics",
		"java-optimizations",
		"java-strictexception",
		"java-strings",
		"java-typeresolution"
	]
}



 sonarqube {

	properties {
		property "sonar.host.url", "http://localhost:9000/"
		property "sonar.projectKey", "com.example.demo"
		property "sonar.projectName", "demo"
		property "sonar.token", "your-sonar-token"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.source", "21"
		property "sonar.java.test.source", "21"
		property "sonar.coverage.jacoco.enabled", "true"	
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.java.pmd.xmlReportPaths", "${project.buildDir}/reports/pmd/main.xml"
		property "sonar.java.checkstyle.xmlReportPaths", "${project.buildDir}/reports/checkstyle/main.xml"
		property "sonar.java.spotbugs.xmlReportPaths", "${project.buildDir}/reports/spotbugs/main.xml"	
	}
}