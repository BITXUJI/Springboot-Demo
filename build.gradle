plugins {
	id 'java' // for java
	id 'org.springframework.boot' version '3.4.2-SNAPSHOT' // for Spring Boot
	id 'io.spring.dependency-management' version '1.1.7' // for dependency management
	id 'pmd' // Code quality
    id 'jacoco' // Code coverage
    id 'checkstyle'// Code style checks
    id 'com.github.spotbugs' version '6.1.3' // Static code analysis // newest version until 2025/02/01
    id 'org.sonarqube' version '6.0.1.5171' // Code quality // newest version until 2025/02/01
	id 'war' // for deployment
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// Because container outside (Tomcat) will provide servlet container, so we need to set embedded Tomcat to provided.
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	testImplementation 'org.mockito:mockito-core:5.15.2'  // newest version until 2025/02/01
	testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2' // newest version until 2025/02/01
}

// Disable bootWar which is a executable war file
//  demo-0.0.1-SNAPSHOT.war is disabled by this setting below
// Note that in build/libs folder 
// (demo-0.0.1-SNAPSHOT.war is a executable war file which can be execuated by java -jar demo-0.0.1-SNAPSHOT.war)
// Before: there is	a demo-0.0.1-SNAPSHOT.war which is created by bootWar 
// Now: demo-0.0.1-SNAPSHOT.war is disappeared
bootWar {
    enabled = false
}

// Enable war which is a deployable war file
war {
    enabled = true	
	// set archive name from demo-0.0.1-SNAPSHOT-plain.war to ROOT.war
	// in order to deploy to Tomcat as ROOT
	// so that we can access http://localhost:8080 instead of http://localhost:8080/demo-0.0.1-SNAPSHOT-plain
	// Note that in build/libs folder 
	// (demo-0.0.1-SNAPSHOT-plain.war is for deploying to Tomcat/webapps folder ) 
	// Before: there is a demo-0.0.1-SNAPSHOT-plain.war which is created by war by default
	// Now: there is a ROOT.war 
	archiveFileName = 'ROOT.war'
}

test {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
	// show test results in the console
	testLogging {
        events "passed", "skipped", "failed"
    }
	jacoco {
	    enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = ['**/config/**', '**/controller/**', '**/repository/**', '**/entity/**', '**/service/**'] // OK
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
	}
}

// read isIgnoreFailures variable from gradle.properties
println("isIgnoreFailures: " + isIgnoreFailures)

checkstyle {
	toolVersion  = '10.21.2' //latest version until 2025/02/01
	configFile = file("$rootDir/checkstyle-checks.xml")
	ignoreFailures = isIgnoreFailures
	checkstyleMain {
		source 'src/main/java'
	}
	checkstyleTest {
		source 'src/test/java'
	}
	checkstyleTest.enabled = true
	configProperties  =[
		'checkstyle.java.version': '21'	
	]
	
}

tasks.withType(Checkstyle) {
	reports {
		xml.required = true
		html.required = true
	}
}

jacoco {
	toolVersion = "0.8.12" //newest version until 2025/02/01
}

jacocoTestReport {
	dependsOn test
	reports {	
		xml.required = true		
		csv.required = false
		html.required = true	
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/config/**', '**/controller/**', '**/repository/**', '**/entity/**', '**/service/**']) // OK
		}))
	}
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.8 
        	}
		}
        rule {
            element = 'CLASS'
            includes = ['com.example.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9 
			}
		}
    }
}

spotbugs {
	toolVersion = "4.9.0" //newest version until 2025/02/01
	ignoreFailures = false
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	reports {
		xml.required = true
		html.required = true
	}
}

pmd {	
	toolVersion = "7.10.0" //latest version until 2025/02/01
	ignoreFailures = isIgnoreFailures
	consoleOutput = true
	ruleSets = [
		"category/java/errorprone.xml", // OK
		"category/java/bestpractices.xml",// OK
		// "category/java/codestyle.xml",//
		// "category/java/design.xml", // OK
		// "category/java/documentation.xml", // OK   CommentSize:    Comment is too large: Too many lines
		// "category/java/multithreading.xml", // OK 
		// "category/java/security.xml", // OK
		// "category/java/performance.xml", // OK
		]
	
}

tasks.withType(Pmd) {
	reports {
		xml.required = true
		html.required = true
	}	
}

// sonarqube configuration 
// def sonar_token = System.getenv("SONAR_TOKEN")
// // Vscode OUTPUT window SONAR_TOKEN is shown as text
// println("SONAR_TOKEN: " + sonar_token)


sonarqube {
	properties {
		// sonar host url
		// property "sonar.host.url", "http://localhost:9000/"
		// sonar project key
		property "sonar.projectKey", "com.example.demo"
		// sonar project name
		property "sonar.projectName", "demo"
		// Remember: sonar.login and sonar password is deprecated, use sonar.token instead.
		// property "sonar.token", sonar_token
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.source", "21"
		property "sonar.java.test.source", "21"
		property "sonar.java.binaries", "$buildDir/classes/java/main"
        property "sonar.java.test.binaries", "$buildDir/classes/java/test"

		// JUnit - Test results
		property "sonar.junit.reportPaths", "$buildDir/test-results/test"
		
		// Coverage exclusions - exclude files from being scanned (supported by default)
		property "sonar.coverage.exclusions", "**/com/example/demo/controller/**" 

		// Inclusions - include files to be scanned (not verified)
		// property "sonar.inclusions", "**/com/example/demo/DemoApplication.java"

		// Exclusions - exluce files from being scanned (not verified)
		// property "sonar.exclusions", "**/com/example/demo/DemoApplication.java"

		// Jacoco - Code coverage
		// Remember: sonar.jacoco.reportPaths is deprecated, use sonar.coverage.jacoco.xmlReportPaths instead.
		// Comma-delimited list of report files (supported by default)
		// Example: property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml" 
		// Wildcard pattern for report files (supported by default)
		property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/*.xml"

		// Pmd - Code quality
		// Remember: (Not supported) Wildcard pattern for report files (not supported) 
		// (Not supported) example: property "sonar.java.pmd.reportPaths", "build/reports/pmd/*.xml"
		// Comma-delimited list of report files	(supported by default)
		property "sonar.java.pmd.reportPaths", "$buildDir/reports/pmd/main.xml"
		
		// Checkstyle - Code style
		// Remember: (Not supported) Wildcard pattern for report files (not supported) 
		// (Not supported) example: property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/*.xml"
		// Comma-delimited list of report files	(supported by default)
		property "sonar.java.checkstyle.reportPaths", "$buildDir/reports/checkstyle/main.xml,$buildDir/reports/checkstyle/test.xml"
		
		// Spotbugs - Static code analysis
		// Remember: (Not supported) Wildcard pattern for report files (not supported)
		// (Not supported) example: property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/*.xml"	
		// Comma-delimited list of report files	(supported by default)
		property "sonar.java.spotbugs.reportPaths", "$buildDir/reports/spotbugs/main.xml,$buildDir/reports/spotbugs/test.xml"

	}
}

// read org.gradle.jvmargs variable from gradle.properties
def jvmArgs = project.findProperty("org.gradle.jvmargs") ?: "org.gradle.jvmargs is undefined" 
// Vscode OUTPUT window org.gradle.jvmargs is shown as text
println "org.gradle.jvmargs: $jvmArgs"

// Another way to read org.gradle.jvmargs from gradle.properties
// if(project.hasProperty("org.gradle.jvmargs")) {
// 	def jvmArgs = project.property("org.gradle.jvmargs")
//  println "org.gradle.jvmargs: $jvmArgs"
// }else{
// 	println("org.gradle.jvmargs is undefined")
// }

println "buildDir: $buildDir"
println "projectDir: $projectDir"
println "rootDir: $rootDir"
