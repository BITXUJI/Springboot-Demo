plugins {
	id 'java' // for java
	id 'org.springframework.boot' version '3.4.2-SNAPSHOT' // for Spring Boot
	id 'io.spring.dependency-management' version '1.1.7' // for dependency management
	id 'pmd' // Code quality
    id 'jacoco' // Code coverage
    id 'checkstyle'// Code style checks
    id 'com.github.spotbugs' version '6.1.3' // Static code analysis // newest version until 2025/02/01
    id 'org.sonarqube' version '6.0.1.5171' // Code quality // newest version until 2025/02/01
	id 'war' // for deployment
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
	useJUnitPlatform()	
	// show test results in the console
	testLogging {
        events "passed", "skipped", "failed"
    }
}
checkstyle {
	toolVersion  = '10.21.2' //latest version until 2025/02/01
	configFile = file("$rootDir/checkstyle-checks.xml")
	ignoreFailures = true
	checkstyleMain {
		source 'src/main/java'
	}
	checkstyleTest {
		source 'src/test/java'
	}
	checkstyleTest.enabled = true
	configProperties  =[
		'checkstyle.java.version': '21'	
	]
	
}

tasks.withType(Checkstyle) {
	reports {
		xml.required = true
		html.required = true
	}
}

jacoco {
	toolVersion = "0.8.12" //newest version until 2025/02/01
}

// test{
// 	jacoco {
// 		enabled = true
// 		excludes = ['com/example/demo/DemoApplication.*']
// 	}
// }

jacocoTestReport {
	reports {	
		xml.required = true		
		csv.required = false
		html.required = true	
	}
	test.finalizedBy jacocoTestReport

}


spotbugs {
	toolVersion = "4.9.0" //newest version until 2025/02/01
	ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	reports {
		xml.required = true
		html.required = true
	}
}

pmd {	
	toolVersion = "7.10.0" //latest version until 2025/02/01
	ignoreFailures = true
	consoleOutput = true
	ruleSets = [
		"category/java/errorprone.xml", // OK
		"category/java/bestpractices.xml",// OK
		// "category/java/codestyle.xml",//
		// "category/java/design.xml", // OK
		// "category/java/documentation.xml", // OK   CommentSize:    Comment is too large: Too many lines
		// "category/java/multithreading.xml", // OK 
		// "category/java/security.xml", // OK
		// "category/java/performance.xml", // OK
		]
	
}

tasks.withType(Pmd) {
	reports {
		xml.required = true
		html.required = true
	}	
}

def sonar_token = System.getProperty("SONAR_TOKEN")
sonarqube {

	properties {
		// sonar host url
		property "sonar.host.url", "http://localhost:9000/"
		// sonar project key
		property "sonar.projectKey", "com.example.demo"
		// sonar project name
		property "sonar.projectName", "demo"
		// Remember: sonar.login and sonar password is deprecated, use sonar.token instead.
		property "sonar.token", sonar_token
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.source", "21"
		property "sonar.java.test.source", "21"
		property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"

		// JUnit - Test results
		property "sonar.junit.reportPaths", "build/test-results/test"
		
		// Coverage exclusions - exclude files from being scanned (not verified)
		// property "sonar.coverage.exclusions", "**/com/example/demo/DemoApplication.java" 

		// Inclusions - include files to be scanned (not verified)
		// property "sonar.inclusions", "**/com/example/demo/DemoApplication.java"

		// Exclusions - exluce files from being scanned (not verified)
		// property "sonar.exclusions", "**/com/example/demo/DemoApplication.java"

		// Jacoco - Code coverage
		// Remember: sonar.jacoco.reportPaths is deprecated, use sonar.coverage.jacoco.xmlReportPaths instead.
		// Comma-delimited list of report files (supported by default)
		// Example: property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml" 
		// Wildcard pattern for report files (supported by default)
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/*.xml"

		// Pmd - Code quality
		// Remember: (Not supported) Wildcard pattern for report files (not supported) 
		// (Not supported) example: property "sonar.java.pmd.reportPaths", "build/reports/pmd/*.xml"
		// Comma-delimited list of report files	(supported by default)
		property "sonar.java.pmd.reportPaths", "build/reports/pmd/main.xml"
		
		// Checkstyle - Code style
		// Remember: (Not supported) Wildcard pattern for report files (not supported) 
		// (Not supported) example: property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/*.xml"
		// Comma-delimited list of report files	(supported by default)
		property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml,build/reports/checkstyle/test.xml"
		
		// Spotbugs - Static code analysis
		// Remember: (Not supported) Wildcard pattern for report files (not supported)
		// (Not supported) example: property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/*.xml"	
		// Comma-delimited list of report files	(supported by default)
		property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/main.xml,build/reports/spotbugs/test.xml"

	}
}